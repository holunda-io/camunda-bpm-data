{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":""},{"location":"index.html#why-should-i-use-this","title":"Why should I use this?","text":"<p>If you are a software engineer and run process automation projects in your company or on behalf of the customer based on Camunda Process Engine, you probably are familiar with process variables. Camunda offers an API to access them and thereby manipulate the state of the process execution - one of the core features during process automation.</p> <p>Unfortunately, as a user of the Camunda API, you have to exactly know the variable type (so the Java class behind it). For example, if you store a String in a variable <code>\"orderId\"</code> you must extract it as a String in every piece of code. Since there is no code connection between the different code parts, but the BPMN process model orchestrates these snippets to a single process execution, it makes refactoring and testing of process automation projects error-prone and challenging.</p> <p>This library helps you to overcome these difficulties and make access, manipulation and testing process variables really easy and convenient. We leverage the Camunda API and offer you not only a better API but also some  additional features.</p>"},{"location":"index.html#how-to-start","title":"How to start?","text":"<p>A good starting point is the Quick Start. For more detailed documentation, please have a look at User Guide.</p>"},{"location":"index.html#get-in-touch","title":"Get in touch","text":"<p>If you are missing a feature, have a question regarding usage or deployment, you should definitely get in touch with the us. There are various ways to do so:</p> <ul> <li>Slack</li> <li>Github Issues</li> <li>Developer Guide</li> </ul>"},{"location":"quick-start.html","title":"Quick Start","text":""},{"location":"quick-start.html#add-dependency","title":"Add dependency","text":"<p>Current version available in Sonatype OSS Maven Central is:</p> <p>In Apache Maven add to your <code>pom.xml</code>:</p> <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;io.holunda.data&lt;/groupId&gt;\n  &lt;artifactId&gt;camunda-bpm-data&lt;/artifactId&gt;\n  &lt;version&gt;${camunda-bpm-data.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>For Gradle Kotlin DSL add to your <code>build.gradle.kts</code>:</p> <pre><code>implementation(\"io.holunda.data:camunda-bpm-data:${camunda-bpm-data.version}\")\n</code></pre> <p>For Gradle Groovy DSL add to your <code>build.gradle</code>:</p> <pre><code>implementation 'io.holunda.data:camunda-bpm-data:${camunda-bpm-data.version}'\n</code></pre>"},{"location":"quick-start.html#declare-process-variable-factories","title":"Declare process variable factories","text":"<p>First you have to define your process variables, by providing the variable name and type. For providing the type, different convenience methods exist:</p> <p>Here is an example in Java:</p> <pre><code>import io.holunda.camunda.bpm.data.factory.VariableFactory;\nimport static io.holunda.camunda.bpm.data.CamundaBpmData.*;\n\npublic class OrderApproval {\n  public static final VariableFactory&lt;String&gt; ORDER_ID = stringVariable(\"orderId\");\n  public static final VariableFactory&lt;Order&gt; ORDER = customVariable(\"order\", Order.class);\n  public static final VariableFactory&lt;Boolean&gt; ORDER_APPROVED = booleanVariable(\"orderApproved\");\n  public static final VariableFactory&lt;OrderPosition&gt; ORDER_POSITION = customVariable(\"orderPosition\", OrderPosition.class);\n  public static final VariableFactory&lt;BigDecimal&gt; ORDER_TOTAL = customVariable(\"orderTotal\", BigDecimal.class);\n}\n</code></pre>"},{"location":"quick-start.html#access-process-variables-from-java-delegate","title":"Access process variables from Java Delegate","text":"<p>If you want to access the process variable, call methods on the <code>ProcessVariableFactory</code> to configure the usage context, and then invoke the variable access methods.</p> <p>Here is an example, how it looks like to access variable from <code>JavaDelegate</code> implemented in Java. In this example, the total amount is calculated from the amounts of order positions and stored in the process variable.</p> <pre><code>@Configuration\nclass JavaDelegates {\n\n  @Bean\n  public JavaDelegate calculateOrderPositions() {\n    return execution -&gt; {\n      OrderPosition orderPosition = ORDER_POSITION.from(execution).get();\n      BigDecimal oldTotal = ORDER_TOTAL.from(execution).getOptional().orElse(BigDecimal.ZERO);\n      BigDecimal newTotal = oldTotal.add(orderPosition.getNetCost().multiply(BigDecimal.valueOf(orderPosition.getAmount())));\n      ORDER_TOTAL.on(execution).setLocal(newTotal);\n    };\n  }\n}\n</code></pre>"},{"location":"quick-start.html#variable-access-from-rest-controller","title":"Variable access from REST Controller","text":"<p>Now imagine you are implementing a REST controller for a user task form which loads data from the process application, displays it, captures some input and sends that back to the process application to complete the user task. By doing so, you will usually need to access process variables. Here is an example:</p> <pre><code>@RestController\n@RequestMapping(\"/task/approve-order\")\npublic class ApproveOrderTaskController {\n\n    private final TaskService taskService;\n\n    public ApproveOrderTaskController(TaskService taskService) {\n        this.taskService = taskService;\n    }\n\n    @GetMapping(\"/{taskId}\")\n    public ResponseEntity&lt;ApproveTaskDto&gt; loadTask(@PathVariable(\"taskId\") String taskId) {\n        Order order = ORDER.from(taskService, taskId).get();\n        return ResponseEntity.ok(new ApproveTaskDto(order));\n    }\n\n    @PostMapping(\"/{taskId}\")\n    public ResponseEntity&lt;Void&gt; completeTask(@PathVariable(\"taskId\") String taskId, @RequestBody ApproveTaskCompleteDto userInput) {\n        VariableMap vars = builder()\n            .set(ORDER_APPROVED, userInput.getApproved())\n            .build();\n        taskService.complete(taskId, vars);\n        return ResponseEntity.noContent().build();\n    }\n}\n</code></pre>"},{"location":"developer-guide/contribution.html","title":"Contributing","text":"<p>There are several ways in which you may contribute to this project.</p> <ul> <li>File new issues if you found a bug or missing feature</li> <li>Submit a pull request, if you have a solution for on of the issues</li> </ul>"},{"location":"developer-guide/contribution.html#found-a-bug-or-missing-feature","title":"Found a bug or missing feature?","text":"<p>Please file an issue in our issue tracking system.</p>"},{"location":"developer-guide/contribution.html#submit-a-pull-request","title":"Submit a Pull Request","text":"<p>If you found a solution to an open issue and implemented it, we would be happy to add your contribution in the code base. For doing so, please create a pull request. Prior to that, please make sure you</p> <ul> <li>rebased against the <code>develop</code> branch</li> <li>sticked to project coding conventions</li> <li>added test cases for the problem you are solving</li> <li>added docs, describing the change</li> <li>generally complied with codeacy report</li> </ul>"},{"location":"developer-guide/project-setup.html","title":"Project Setup","text":"<p>If you are interested in developing and building the project please follow the following instruction.</p>"},{"location":"developer-guide/project-setup.html#version-control","title":"Version control","text":"<p>To check out sources of the project, please execute from your command line:</p> <pre><code>git clone https://github.com/holunda-io/camunda-bpm-data.git\ncd camunda-bpm-data\n</code></pre> <p>We are using gitflow in our git SCM. That means that you should start from <code>develop</code> branch, create a <code>feature/&lt;name&gt;</code> out of it and once it is completed create a pull request containing it. Please squash your commits before submitting and use semantic commit messages, if possible.</p>"},{"location":"developer-guide/project-setup.html#project-build","title":"Project Build","text":"<p>Perform the following steps to get a development setup up and running.</p> <pre><code>./mvnw clean install\n</code></pre>"},{"location":"developer-guide/project-setup.html#integration-tests","title":"Integration Tests","text":"<p>The default build command above will NOT run <code>failsafe</code> Maven plugin executing the integration tests (These are JUnit tests with class names ending with ITest). In order to run integration tests, please call from your command line:</p> <pre><code>./mvnw -Pitest\n</code></pre>"},{"location":"developer-guide/project-setup.html#project-build-modes-and-profiles","title":"Project build modes and profiles","text":""},{"location":"developer-guide/project-setup.html#camunda-version","title":"Camunda Version","text":"<p>You can choose the used Camunda version by specifying the profile <code>camunda-ee</code> or <code>camunda-ce</code>. The default version is a Community Edition. Specify <code>-Pcamunda-ee</code> to switch to Camunda Enterprise edition. This will require a valid Camunda license. You can put it into a file <code>~/.camunda/license.txt</code> and it will be detected automatically.</p>"},{"location":"developer-guide/project-setup.html#examples","title":"Examples","text":"<p>If you want to skip the build of examples, please specify the <code>-DskipExamples</code> switch in your command line.</p>"},{"location":"developer-guide/project-setup.html#documentation","title":"Documentation","text":"<p>We are using MkDocs for generation of a static site documentation and rely on markdown as much as possible. To install it, please run once:</p> <pre><code>python3 -m pip install -r ./docs/requirements.txt\n</code></pre> <p>Note</p> <p>If you want to develop your docs in 'live' mode, run <code>mkdocs serve</code> and access the http://localhost:8000/ from your browser.</p> <p>For creation of documentation locally, please run:</p> <pre><code>mkdocs build\n</code></pre>"},{"location":"developer-guide/project-setup.html#generation-of-javadoc-and-sources","title":"Generation of JavaDoc and Sources","text":"<p>By default, the sources and javadoc API documentation are not generated from the source code. To enable this:</p> <pre><code>./mvnw clean install -Prelease -Dgpg.skip=true\n</code></pre>"},{"location":"developer-guide/project-setup.html#starting-example-application","title":"Starting example application","text":"<p>To start applications, either use your IDE and create run configuration for the classes:</p> <ul> <li><code>io.holunda.camunda.bpm.data.example.CamundaBpmDataProcessApplication</code></li> <li><code>io.holunda.camunda.bpm.data.example.kotlin.CamundaBpmDataKotlinExampleApplication</code></li> </ul> <p>Alternatively, you can run them from the command line:</p> <pre><code>./mvn spring-boot:run -f example/example-java\n./mvn spring-boot:run -f example/example-kotlin\n</code></pre>"},{"location":"developer-guide/project-setup.html#continuous-integration","title":"Continuous Integration","text":"<p>GitHub Actions is building all branches on commit hook. In addition, a special action is building releases from master branch.</p>"},{"location":"developer-guide/project-setup.html#release-management","title":"Release Management","text":"<p>Release management has been set up for use of Sonatype Nexus (= Maven Central).</p>"},{"location":"developer-guide/project-setup.html#what-modules-get-deployed-to-repository","title":"What modules get deployed to repository","text":"<p>Currently, the following modules are released to OSS Maven Central:</p> <ul> <li>camunda-bpm-data-parent</li> <li>camunda-bpm-data</li> </ul>"},{"location":"developer-guide/project-setup.html#trigger-new-release","title":"Trigger new release","text":"<p>Note</p> <p>This operation requires special permissions.</p> <p>We use gitflow for development (see A successful git branching model for more details). You could use gitflow with native git commands, but then you would have to change the versions in the poms manually. Therefor we use the mvn gitflow plugin, which handles this and other things nicely.</p> <p>You can build a release with:</p> <pre><code>./mvnw gitflow:release-start\n./mvnw gitflow:release-finish\n</code></pre> <p>This will update the versions in the <code>pom.xml</code> s accordingly and push the release tag to the <code>master</code> branch and update the <code>develop</code> branch for the new development version.</p>"},{"location":"developer-guide/project-setup.html#create-feature-for-development","title":"Create feature for development","text":"<p>You can create a feature branch for development using:</p> <pre><code>./mvnw gitflow:feature-start\n</code></pre> <p>Note</p> <p>This operation requires special permissions.</p> <p>After the feature is complete, create a PR. To merge the PR into develop use the command:</p> <pre><code>./mvnw gitflow:feature-finish\n</code></pre>"},{"location":"developer-guide/project-setup.html#trigger-a-deploy","title":"Trigger a deploy","text":"<p>Note</p> <p>This operation requires special permissions.</p> <p>Currently, CI allows for deployment of artifacts to Maven Central and is executed via Github Actions. This means, that a push to <code>master</code> branch will start the corresponding build job, and if successful the artifacts will get into <code>Staging Repositories</code> of OSS Sonatype without manual intervention. The repository gets automatically closed and released on successful upload.</p> <p>If you still want to execute the deployment from your local machine, you need to execute the following command on the <code>master</code> branch:</p> <pre><code>./mvnw clean deploy -B -DskipTests -DskipExamples -Prelease\n</code></pre>"},{"location":"user-guide/examples-java.html","title":"Usage in Java","text":"<p>The following example code demonstrates the usage of the library using Java.</p>"},{"location":"user-guide/examples-java.html#define-variable","title":"Define variable","text":"<pre><code>public class OrderApproval {\n  public static final VariableFactory&lt;String&gt; ORDER_ID = stringVariable(\"orderId\");\n  public static final VariableFactory&lt;Order&gt; ORDER = customVariable(\"order\", Order.class);\n  public static final VariableFactory&lt;Boolean&gt; ORDER_APPROVED = booleanVariable(\"orderApproved\");\n  public static final VariableFactory&lt;OrderPosition&gt; ORDER_POSITION = customVariable(\"orderPosition\", OrderPosition.class);\n  public static final VariableFactory&lt;BigDecimal&gt; ORDER_TOTAL = customVariable(\"orderTotal\", BigDecimal.class);\n}\n</code></pre>"},{"location":"user-guide/examples-java.html#read-variable-from-java-delegate","title":"Read variable from Java delegate","text":"<pre><code>@Configuration\nclass JavaDelegates {\n\n  @Bean\n  public JavaDelegate calculateOrderPositions() {\n    return execution -&gt; {\n      OrderPosition orderPosition = ORDER_POSITION.from(execution).get();\n      Boolean orderApproved = ORDER_APPROVED.from(execution).getLocal();\n      Optional&lt;BigDecimal&gt; orderTotal = ORDER_TOTAL.from(execution).getOptional();\n    };\n  }\n}\n</code></pre>"},{"location":"user-guide/examples-java.html#write-variable-from-java-delegate","title":"Write variable from Java delegate","text":"<pre><code>import java.math.BigDecimal;\n\n@Configuration\nclass JavaDelegates {\n\n  @Bean\n  public JavaDelegate calculateOrderPositions() {\n    return execution -&gt; {\n      OrderPosition orderPosition = new OrderPosition(\"Pencil\", BigDecimal.valueOf(1.5), 1);\n      ORDER_POSITION.on(execution).set(orderPosition);\n    };\n  }\n}\n</code></pre>"},{"location":"user-guide/examples-java.html#remove-variable-from-java-delegate","title":"Remove variable from Java delegate","text":"<pre><code>import java.math.BigDecimal;\n@Configuration\nclass JavaDelegates {\n\n  @Bean\n  public JavaDelegate calculateOrderPositions() {\n    return execution -&gt; {\n      ORDER_APPROVED.on(execution).removeLocal();\n    };\n  }\n}\n</code></pre>"},{"location":"user-guide/examples-java.html#update-variable-from-java-delegate","title":"Update variable from Java delegate","text":"<pre><code>import java.math.BigDecimal;\n@Configuration\nclass JavaDelegates {\n\n  @Bean\n  public JavaDelegate calculateOrderPositions() {\n    return execution -&gt; {\n      OrderPosition orderPosition = ORDER_POSITION.from(execution).get();\n      ORDER_TOTAL.on(execution).updateLocal(amount -&gt; amount.add(orderPosition.getNetCost().multiply(BigDecimal.valueOf(orderPosition.getAmount()))));\n    };\n  }\n}\n</code></pre>"},{"location":"user-guide/examples-java.html#fluent-api-to-remove-several-variables","title":"Fluent API to remove several variables","text":"<pre><code>@Configuration\nclass JavaDelegates {\n\n  @Bean\n  public ExecutionListener removeProcessVariables() {\n    return execution -&gt;\n    {\n      CamundaBpmData.writer(execution)\n          .remove(ORDER_ID)\n          .remove(ORDER)\n          .remove(ORDER_APPROVED)\n          .remove(ORDER_TOTAL)\n          .removeLocal(ORDER_POSITIONS);\n    };\n  }\n}\n</code></pre>"},{"location":"user-guide/examples-java.html#fluent-api-to-set-several-variables","title":"Fluent API to set several variables","text":"<pre><code>@Component\nclass SomeService {\n\n  @Autowired\n  private RuntimeService runtimeService;\n  @Autowired\n  private TaskService taskService;\n\n  public void setNewValuesForExecution(String executionId, String orderId, Boolean orderApproved) {\n      CamundaBpmData.writer(runtimeService, executionId)\n          .set(ORDER_ID, orderId)\n          .set(ORDER_APPROVED, orderApproved)\n          .update(ORDER_TOTAL, amount -&gt; amount.add(10));\n  }\n\n  public void setNewValuesForTask(String taskId, String orderId, Boolean orderApproved) {\n      CamundaBpmData.writer(taskService, taskId)\n          .set(ORDER_ID, orderId)\n          .set(ORDER_APPROVED, orderApproved);\n  }\n\n  public void start() {\n      VariableMap variables = CamundaBpmData.writer()\n          .set(ORDER_ID, \"4711\")\n          .set(ORDER_APPROVED, false)\n          .build();\n      runtimeService.startProcessInstanceById(\"myId\", \"businessKey\", variables);\n  }\n}\n</code></pre>"},{"location":"user-guide/examples-java.html#fluent-api-to-read-several-variables","title":"Fluent API to read several variables","text":"<pre><code>@Component\nclass SomeService {\n\n  @Autowired\n  private RuntimeService runtimeService;\n  @Autowired\n  private TaskService taskService;\n\n  public String readValuesFromExecution(String executionId) {\n      VariableReader reader = CamundaBpmData.reader(runtimeService, executionId);\n      String orderId = reader.get(ORDER_ID);\n      Boolean orderApproved = reader.get(ORDER_APPROVED);\n      if (orderApproved) {\n          // ...\n      }\n      return orderId;\n  }\n\n  public String readValuesFromTask(String taskId) {\n      VariableReader reader = CamundaBpmData.reader(taskService, taskId);\n      String orderId = reader.get(ORDER_ID);\n      Boolean orderApproved = reader.get(ORDER_APPROVED);\n      if (orderApproved) {\n          // ...\n      }\n      return orderId;\n  }\n}\n</code></pre>"},{"location":"user-guide/examples-java.html#anti-corruption-layer-wrap-variables-to-correlate","title":"Anti-Corruption-Layer: Wrap variables to correlate","text":"<pre><code>@Component\nclass SomeService {\n\n  private static final AntiCorruptionLayer MESSAGE_ACL = CamundaBpmDataMapper.identityReplace(\n      \"__transient\",\n      true\n  );\n\n  public void correlate() {\n      VariableMap variables = CamundaBpmData.builder()\n          .set(ORDER_ID, \"4711\")\n          .set(ORDER_APPROVED, false)\n          .build();\n      runtimeService.correlateMessage(\"message_1\", MESSAGE_ACL.wrap(variables));\n  }\n}\n</code></pre>"},{"location":"user-guide/examples-java.html#anti-corruption-layer-check-and-wrap-variables-to-correlate","title":"Anti-Corruption-Layer: Check and wrap variables to correlate","text":"<pre><code>@Component\nclass SomeService {\n\n    private static AntiCorruptionLayer MY_ACL = CamundaBpmDataACL.guardTransformingReplace(\n        \"__transient\",\n        true,\n        new VariablesGuard(exists(ORDER_ID)),\n        IdentityVariableMapTransformer.INSTANCE\n    );\n\n  public void correlate() {\n      VariableMap variables = CamundaBpmData.builder()\n          .set(ORDER_ID, \"4711\")\n          .set(ORDER_APPROVED, false)\n          .build();\n      runtimeService.correlateMessage(\"message_1\", MESSAGE_ACL.checkAndWrap(variables));\n  }\n}\n</code></pre>"},{"location":"user-guide/examples-java.html#define-guards-to-validate-variables-in-the-process","title":"Define Guards to validate variables in the process","text":"<pre><code>@Configuration\nclass VariableGuardConfiguration {\n\n    public static final String MY_GUARD_BEANNAME = \"myGuardBeanName\";\n\n    @Bean\n    public Supplier&lt;Validator&gt;  validatorSupplier() {\n        // assuming dependencys to implement javax.validation:validation-api are present\n        return () -&gt; Validation.buildDefaultValidatorFactory().getValidator();\n    }\n\n    @Bean(VariableGuardConfiguration.MY_GUARD_BEANNAME)\n    public ExecutionListener myGuardBeanName(Supplier&lt;Validator&gt; validatorSupplier) {\n        return new DefaultGuardExecutionListener(\n            new VariablesGuard(\n                Arrays.asList(\n                    exists(REQUIRED_VALUE),\n                    notExists(FUTURE_VALUE),\n                    hasValue(THE_ANSWER, 42),\n                    hasOneOfValues(MY_DIRECTION, Set.of(\"left\", \"up\", \"down\")),\n                    isEmail(USER_EMAIL),\n                    isUuid(DOCUMENT_ID),\n                    matches(DOCUMENT_BODY, this::myDocumentBodyMatcher),\n                    matches(DOCUMENT_BODY, this::myDocumentBodyMatcher, this::validationMessageSupplier),\n                    matchesRegex(DOCUMENT_BODY, \"^Dude.*\", \"Starts with 'Dude'\"),\n                    isValidBean(My_DOCUMENT, validatorSupplier)\n                )\n            ), true);\n    }\n\n    private Boolean myDocumentBodyMatcher(String body) {\n        return true;\n    }    \n\n    private String validationMessageSupplier(VariableFactory&lt;String&gt; variableFactory, String localLabel, Optional&lt;String&gt; option) {\n        return String.format(\"Expecting%s variable '%s' to always match my document body matcher, but its value '%s' has not.\", localLabel, variableFactory.getName(), option.orElse(\"\"));\n    }\n}\n\nclass MyDocument {\n    @Email\n    public String email;    \n}\n</code></pre>"},{"location":"user-guide/examples-java.html#example-project","title":"Example project","text":"<p>For more examples, please check out the Java Example project, at GitHub</p>"},{"location":"user-guide/examples-kotlin.html","title":"Usage in Kotlin","text":"<p>The following snippets demonstrate the usage of the library from Kotlin</p>"},{"location":"user-guide/examples-kotlin.html#define-variable","title":"Define variable","text":"<pre><code>import io.holunda.data.CamundaBpmDataKotlin\n\nobject Variables {\n    val ORDER_ID = stringVariable(\"orderId\")\n    val ORDER: VariableFactory&lt;Order&gt; = customVariable(\"order\")\n    val ORDER_APPROVED = booleanVariable(\"orderApproved\")\n    val ORDER_POSITION: VariableFactory&lt;OrderPosition&gt; = customVariable(\"orderPosition\")\n    val ORDER_TOTAL: VariableFactory&lt;BigDecimal&gt; = customVariable(\"orderTotal\")\n}\n</code></pre>"},{"location":"user-guide/examples-kotlin.html#define-nonnull-variable","title":"Define nonNull variable","text":"<p>IMPORTANT: Since 1.5.0 all predefined variable types are nullable by default. (For more information, see  here: Github Issue) If you want to define a variable to be non-null-able, please call nonNull on variable factory as shown in the example below.</p> <pre><code>import io.holunda.data.CamundaBpmDataKotlin\n\nobject Variables {\n    val ORDER_ID: VariableFactory&lt;String&gt; = stringVariable(\"orderId\").nonNull\n    val CUSTOMER_ID: VariableFactory&lt;String?&gt; = stringVariable(\"orderId\")\n}\n</code></pre>"},{"location":"user-guide/examples-kotlin.html#_1","title":"Usage in Kotlin","text":""},{"location":"user-guide/examples-kotlin.html#read-variable-from-java-delegate","title":"Read variable from Java delegate","text":"<pre><code>@Configuration\nclass JavaDelegates {\n\n    @Bean\n    fun calculateOrderPositions() = JavaDelegate { execution -&gt;\n        val orderPosition = ORDER_POSITION.from(execution).get()\n        // order position is of type OrderPosition\n    }\n}\n</code></pre>"},{"location":"user-guide/examples-kotlin.html#write-variable-from-java-delegate","title":"Write variable from Java delegate","text":"<pre><code>import java.math.BigDecimal\n\n@Configuration\nclass JavaDelegates {\n\n    @Bean\n    fun calculateOrderPositions() = JavaDelegate { execution -&gt;\n        val orderPosition = ORDER_POSITION.from(execution).get()\n        ORDER_TOTAL.on(execution).set {\n            orderPosition.netCost.times(BigDecimal.valueOf(orderPosition.amount))\n        }\n    }\n}\n</code></pre>"},{"location":"user-guide/examples-kotlin.html#remove-variable-from-java-delegate","title":"Remove variable from Java delegate","text":"<pre><code>@Configuration\nclass JavaDelegates {\n\n    @Bean\n    fun removeTotal() = JavaDelegate { execution -&gt;\n        ORDER_TOTAL.on(execution).remove()\n    }\n}\n</code></pre>"},{"location":"user-guide/examples-kotlin.html#update-variable-from-java-delegate","title":"Update variable from Java delegate","text":"<pre><code>import java.math.BigDecimal\n@Configuration\nclass JavaDelegates {\n\n    @Bean\n    fun calculateOrderPositions() = JavaDelegate { execution -&gt;\n        val orderPosition = ORDER_POSITION.from(execution).get()\n        ORDER_TOTAL.on(execution).update {\n            it.plus(orderPosition.netCost.times(BigDecimal.valueOf(orderPosition.amount)))\n        }\n    }\n}\n</code></pre>"},{"location":"user-guide/examples-kotlin.html#fluent-api-to-remove-several-variables","title":"Fluent API to remove several variables","text":"<pre><code>import io.holunda.camunda.bpm.data.remove\n\n@Configuration\nclass JavaDelegates {\n\n    @Bean\n    fun removeProcessVariables() = JavaDelegate { execution -&gt;\n        execution\n            .remove(ORDER_ID)\n            .remove(ORDER)\n            .remove(ORDER_APPROVED)\n            .remove(ORDER_TOTAL)\n            .removeLocal(ORDER_POSITIONS)\n    }\n}\n</code></pre>"},{"location":"user-guide/examples-kotlin.html#fluent-api-to-set-several-variables","title":"Fluent API to set several variables","text":"<pre><code>@Component\nclass SomeService(\n    private val runtimeService: RuntimeService,\n    private val taskService: TaskService\n) {\n\n    fun setNewValuesForExecution(executionId: String, rderId: String, orderApproved: Boolean) {\n        runtimeService.writer(executionId)\n            .set(ORDER_ID, orderId)\n            .set(ORDER_APPROVED, orderApproved)\n            .update(ORDER_TOTAL, { amount -&gt; amount.add(10) })\n    }\n\n    fun setNewValuesForTask(taskId: String, orderId: String, orderApproved: Boolean) {\n        taskService.writer(taskId)\n            .set(ORDER_ID, orderId)\n            .set(ORDER_APPROVED, orderApproved)\n    }\n\n  fun start() {\n      val variables = createProcessVariables()\n          .set(ORDER_ID, \"4711\")\n          .set(ORDER_APPROVED, false)\n      runtimeService.startProcessInstanceById(\"myId\", \"businessKey\", variables)\n  }\n}\n</code></pre>"},{"location":"user-guide/examples-kotlin.html#fluent-api-to-read-several-variables","title":"Fluent API to read several variables","text":"<pre><code>@Component\nclass SomeService(\n  private val runtimeService: RuntimeService,\n  private val taskService: TaskService\n) {\n\n  fun readValuesFromExecution(executionId: String): String {\n      val reader = CamundaBpmData.reader(runtimeService, executionId)\n      val orderId = reader.get(ORDER_ID)\n      val orderApproved = reader.get(ORDER_APPROVED)\n      if (orderApproved) {\n          // ...\n      }\n      return orderId\n  }\n\n  fun readValuesFromTask(taskId: String ): String {\n      val reader = CamundaBpmData.reader(taskService, taskId)\n      val orderId = reader.get(ORDER_ID)\n      val orderApproved = reader.get(ORDER_APPROVED)\n      if (orderApproved) {\n          // ...\n      }\n      return orderId\n  }\n}\n</code></pre>"},{"location":"user-guide/examples-kotlin.html#anti-corruption-layer-wrap-variables-to-correlate","title":"Anti-Corruption-Layer: Wrap variables to correlate","text":"<pre><code>@Component\nclass SomeService {\n\n  val MESSAGE_ACL = CamundaBpmDataMapper.identityReplace(\"__transient\", true);\n\n  fun correlate() {\n      val variables = CamundaBpmData.builder()\n          .set(ORDER_ID, \"4711\")\n          .set(ORDER_APPROVED, false)\n          .build();\n      runtimeService.correlateMessage(\"message_1\", MESSAGE_ACL.wrap(variables));\n  }\n}\n</code></pre>"},{"location":"user-guide/examples-kotlin.html#anti-corruption-layer-check-and-wrap-variables-to-correlate","title":"Anti-Corruption-Layer: Check and wrap variables to correlate","text":"<pre><code>@Component\nclass SomeService {\n\n    val MY_ACL = CamundaBpmDataACL.guardTransformingReplace(\n        \"__transient\",\n        true,\n        VariablesGuard(exists(ORDER_ID)),\n        IdentityVariableMapTransformer\n    );\n\n  fun correlate() {\n      val variables = CamundaBpmData.builder()\n          .set(ORDER_ID, \"4711\")\n          .set(ORDER_APPROVED, false)\n          .build();\n      runtimeService.correlateMessage(\"message_1\", MESSAGE_ACL.checkAndWrap(variables));\n  }\n}\n</code></pre>"},{"location":"user-guide/examples-kotlin.html#define-guards-to-validate-variables-in-the-process","title":"Define Guards to validate variables in the process","text":"<pre><code>@Configuration\nclass VariableGuardConfiguration {\n\n    companion object {\n        const val LOAD_OPERATIONAL_FILE_GUARD = \"loadOperationalFileGuard\";\n    }\n\n    @Bean\n    // assuming dependencys to implement javax.validation:validation-api are present\n    fun validatorSupplier(): Supplier&lt;Validator&gt; = Supplier {\n      Validation.buildDefaultValidatorFactory().validator\n    }\n\n    @Bean(LOAD_OPERATIONAL_FILE_GUARD)\n    fun loadOperationalFileGuard(validatorSupplier : Supplier&lt;Validator&gt;): ExecutionListener =\n        DefaultGuardExecutionListener(\n            VariablesGuard(\n                listOf(\n                    REQUIRED_VALUE.exists(),\n                    FUTURE_VALUE.notExists(),\n                    THE_ANSWER.hasValue(42),\n                    MY_DIRECTION.hasOneOfValues(setOf(\"left\", \"up\", \"down\")),\n                    USER_EMAIL.isEmail(),\n                    DOCUMENT_ID.isUuid(),\n                    DOCUMENT_BODY.matches { return@matches true },\n                    DOCUMENT_BODY.matches(this::validationMessageSupplier) { return@matches true },\n                    DOCUMENT_BODY.matchesRegexLocal(Regex(\"^Dude.*\"), \"Starts with 'Dude'\"),\n                    MY_DOCUMENT.isValidBean(validatorSupplier)\n                )\n            ), true\n        )\n\n    private fun validationMessageSupplier(variableFactory: VariableFactory&lt;String&gt;, localLabel: String, option: Optional&lt;String&gt;) =\n        \"Expecting$localLabel variable '${variableFactory.name}' to always match my document body matcher, but its value '${option.get()}' has not.\"\n}\n\nclass MyDocument(@field:Email val email: String)\n</code></pre>"},{"location":"user-guide/examples-kotlin.html#example-project","title":"Example project","text":"<p>For more examples, please check out the Kotlin Example project, at GitHub.</p>"},{"location":"user-guide/examples-no-engine.html","title":"Usage without Camunda Platform","text":""},{"location":"user-guide/examples-no-engine.html#use-case","title":"Use case","text":"<p>In seldom cases you may want to use the <code>camunda-bpm-data</code> library without Camunda BPM Engine. The most frequent case for this is if you provide a third-party library that is used with or without the engine. In particular, there is no way to use  functionality relying on the Camunda engine without it, but there is some functionality working on simple <code>Map&lt;String, Object&gt;</code> or <code>VariableMap</code>  (from a separate small library <code>org.camunda.commons:camunda-commons-typed-values</code>) which is still usable WITHOUT having the entire Camunda  BPM Engine on the class path.</p>"},{"location":"user-guide/examples-no-engine.html#limitations","title":"Limitations","text":"<p>Due to limitations provided by the JVM, usage of <code>CamundaBpmData</code> convenience methods is NOT POSSIBLE if the parts of the Java Camunda API is not on the classpath (<code>RuntimeService</code>, <code>TaskService</code>, <code>LockedExternalTask</code>, ...).</p>"},{"location":"user-guide/examples-no-engine.html#default-solution","title":"Default solution","text":"<p>The default solution for this problem would be to put the <code>org.camunda.bpm:camunda-engine</code> Camunda BPM Engine JAR on the classpath, but don't initialize the Camunda BPM Engine.</p>"},{"location":"user-guide/examples-no-engine.html#alternative-solution","title":"Alternative solution","text":"<p>In order to make the JAR footprint lighter, we created a special artifact, which provides the Camunda BPM API only (API classes only but no implementation). This artifact includes ORIGINAL Camunda BPM classes of the API.</p> <p>In the same time, we started a discussion with Camunda Team to provide a dedicated API JAR of the engine. We will produce the Camunda BPM API for the upcoming releases. Instead of using the original engine JAR, you might want to put the following artifact on your classpath:</p> <pre><code>&lt;dependency&gt;\n      &lt;groupId&gt;io.holunda.camunda-api&lt;/groupId&gt;\n      &lt;artifactId&gt;camunda-bpm-engine-api&lt;/artifactId&gt;\n      &lt;version&gt;${camunda.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>For more information about the Camunda BPM API, please check its GitHub project page:  https://github.com/holunda-io/camunda-bpm-api/</p>"},{"location":"user-guide/features.html","title":"Features","text":"<ul> <li> <p>Process Variables</p> <ul> <li>The library provides a way to construct a generic adapter for every process variable.</li> <li>The adapter contains variable type.</li> <li>The adapter can be applied in any context (<code>RuntimeService</code>, <code>TaskService</code>, <code>CaseService</code>, <code>DelegateExecution</code>, <code>DelegateTask</code>, <code>DelegateCaseExecution</code>, <code>VariableMap</code>, <code>LockedExternalTask</code>).</li> <li>The adapter offers methods to read, write, update and remove variable values.</li> <li>The adapter works for all types supported by Camunda BPM. This includes primitive types, object and container types ( <code>List&lt;T&gt;</code>, <code>Set&lt;T&gt;</code>, <code>Map&lt;K , V&gt;</code> ).</li> <li>The adapter supports global / local variables.</li> <li>The adapter allows a default value or null in case a variable is not set.</li> <li>The adapter support transient variables.</li> <li>Fluent API helper are available in order to set, remove or update multiple variables in the same context (<code>VariableMapBuilder</code>, <code>VariableReader</code> and <code>GlobalVariableWriter</code>).</li> </ul> </li> <li> <p>Process Variable Guards</p> <ul> <li>Generic support for <code>VariableGuard</code> for evaluation of a list of <code>VariableCondition</code>s</li> <li>Condition to check if variable exists.</li> <li>Condition to check if variable doesn't exist</li> <li>Condition to check if variable has a predefined value.</li> <li>Condition to check if variable has one of predefined values.</li> <li>Condition to check if variable matches condition specified by a custom function.</li> <li>Condition to check if variable matches provided regular expression.</li> <li>Condition to check if variable is a valid email address.</li> <li>Condition to check if variable is a valid UUID.</li> <li><code>DefaultGuardTaskListener</code> to construct variable conditions guards easily.</li> <li><code>DefaultGuardExecutionListener</code> to construct variable conditions guards easily.</li> </ul> </li> <li> <p>Anti-Corruption-Layer</p> <ul> <li>Generic support for <code>AntiCorruptionLayer</code> for protection and influence of variable modification in signalling and message correlation.</li> <li>Helper methods for the client to wrap variables in a transient carrier.</li> <li>Execution listener to handle <code>VariableGuard</code>-based conditions and <code>VariableMapTransformer</code>-based modifications.</li> <li>Task listener to handle <code>VariableGuard</code>-based conditions and <code>VariableMapTransformer</code>-based modifications.</li> <li>Factory methods to create <code>AntiCorruptionLayer</code> with a <code>VariableGuard</code> (see <code>CamundaBpmDataACL</code>)</li> <li>Factory methods to create <code>AntiCorruptionLayer</code> without a <code>VariableGuard</code> (see <code>CamundaBpmDataMapper</code>)</li> </ul> </li> </ul>"},{"location":"user-guide/further-outlook.html","title":"Further Outlook","text":"<ul> <li>Implement Contracts to be able to check guards automatically // We implemented all features we could imagine so far, if you are missing something, please // open an issue in https://github.com/holunda-io/camunda-bpm-data/issues[Github].</li> </ul>"},{"location":"user-guide/motivation.html","title":"Motivation","text":""},{"location":"user-guide/motivation.html#typed-access-to-process-variables","title":"Typed access to process variables","text":"<p>Camunda BPM engine provide Java API to access the process variables. This consists of:</p> <ul> <li><code>RuntimeService</code> methods</li> <li><code>TaskService</code> methods</li> <li>Methods on <code>DelegateExecution</code></li> <li>Methods on <code>DelegateTask</code></li> <li><code>VariableMap</code></li> </ul> <p>All those methods requires the user of the API to know the variable type. Here is a usage example:</p> <pre><code>ProcessInstance processInstance = ...;\nList&lt;OrderPosition&gt; orderPositions = (List&lt;OrderPosition&gt;) runtimeService\n  .getVariable(processInstance.id, \"orderPositions\");\n</code></pre> <p>This leads to problems during refactoring and makes variable access more complicated than it is. This library addresses this issue and allows for more convenient type-safe process variable access.</p> <p>More details can be found in:</p> <ul> <li>Data in Process (Part 1)</li> <li>Data in Process (Part 2)</li> </ul>"},{"location":"user-guide/motivation.html#variable-guards","title":"Variable guards","text":"<p>Process automation often follows strict rules defined by the business. On the other hand, the process execution itself defines rules in terms of pre- and post-conditions on the process payload (stored as process variables in Camunda BPM). Rising complexity of the implemented processes makes the compliance to those rules challenging. In order to fulfill the conditions on process variables during the execution of business processes, a concept of <code>VariableGuard</code> is provided by the library. A guard consists of a set of <code>VariableConditions</code> and can be evaluated in all contexts, the variables are used in: <code>DelegateTask</code>, <code>DelegateExecution</code>, <code>TaskService</code>, <code>RuntimeService</code>, <code>VariableMap</code>.</p> <p>Here is an example of a task listener defining a <code>VariablesGuard</code> to test that the process variables <code>ORDER_APPROVED</code> and  <code>APPROVER_ID</code> are set, which will throw a <code>GuardViolationException</code> if the condition is not met.</p> <pre><code>import static io.holunda.camunda.bpm.data.guard.CamundaBpmDataGuards.exists;\n\n@Component\nclass MyGuardListener extends DefaultGuardTaskListener {\n\n    public MyGuardListener() {\n        super(new VariablesGuard(List.of(exists(ORDER_APPROVED), exists(APPROVER_ID)), true);\n    }\n}\n</code></pre> <p>By default, all conditions of a <code>VariablesGuard</code> must be met in order to pass the validations. This behaviour can be explicitly defined by passing the <code>reduceOperator = VariablesGuard.ALL</code> when creating the <code>VariablesGuard</code>. The <code>reduceOperator</code> can take  the following values:</p> <code>reduceOperator</code> Semantics <code>VariablesGuard.ALL</code> All <code>VariableCondition</code>s must be met <code>VariablesGuard.ONE_OF</code> At least ONE <code>VariableCondition</code> must be met"},{"location":"user-guide/motivation.html#anti-corruption-layer","title":"Anti-Corruption-Layer","text":"<p>If a process is signalled or hit by a correlated message, there is no way to check if the transported variables are set correctly. In addition, the variables are written directly to the execution of the correlated process instance. In case of a multi-instance event-base sub-process this will eventually overwrite the values of the main execution.</p> <p>To prevent all this, a feature called Anti-Corruption-Layer (ACL) is implemented. An ACL is there to protect the execution from bad modifications and influence the way, the modification is executed. For the protection, an ACL relies on a Variables Guards, defining conditions to be satisfied. For the influencing of modification, the <code>VariableMapTransformer</code> can be used.</p> <p>To use the ACL layer you will need to change the way you correlate messages (or signal the execution). Instead of supplying the variables directly to the <code>correlate</code> method of the <code>RuntimeService</code>, the client is wrapping all variables into a map hold by a single transient variable and correlate this variable with the process (we call this procedure variable wrapping). On the process side, an execution listener placed on the end of the catch event is responsible to extract the variable map from the transient variable, check it by passing through the <code>VariablesGuard</code> and finally pass over to the <code>VariableMapTransformer</code> to map from external to internal representation.</p> <p>Here is the code, required on the client side to correlate the message.</p> <pre><code>@Component\nclass SomeService {\n\n    private static AntiCorruptionLayer MY_ACL = CamundaBpmDataACL.guardTransformingReplace(\n        \"__transient\", // name of the transient variable for wrapping\n        true, // if passes the guard, write to local scope\n        new VariablesGuard(exists(ORDER_ID)), // guard defining condition on ORDER_ID\n        IdentityVariableMapTransformer.INSTANCE // use 1:1 transformer\n                                                // write the variables without modifications\n    );\n\n    public void correlate() {\n        VariableMap variables = CamundaBpmData.builder()\n          .set(ORDER_ID, \"4711\")\n          .set(ORDER_APPROVED, false)\n          .build();\n        runtimeService.correlateMessage(\"message_1\", MESSAGE_ACL.checkAndWrap(variables));\n    }\n}\n</code></pre> <p>On the process side, the BPMN message catch event should have an <code>End</code> listener responsible for unwrapping the values. If the listener is implemented as a Spring Bean bounded via delegate expression <code>${messageAclListener}</code> then the following code is responsible for providing such a listener:</p> <pre><code>@Configuration\nclass SomeConfiguration {\n\n    private static AntiCorruptionLayer MY_ACL = CamundaBpmDataACL.guardTransformingReplace(\n        \"__transient\", // name of the transient variable for wrapping\n        true, // if passes the guard, write to local scope\n        new VariablesGuard(exists(ORDER_ID)), // guard defining condition on ORDER_ID\n        IdentityVariableMapTransformer.INSTANCE // use 1:1 transformer\n                                                // write the variables without modifications\n    );\n\n    @Bean(\"messageAclListener\")\n    public ExecutionListener messageAclListener() {\n        return MY_ACL.getExecutionListener();\n    }\n}\n</code></pre> <p>Such a setup will only allow to correlate messages, if the variables provided include a value for the <code>ORDER_ID</code>. It will write all variables provided (<code>ORDER_ID</code> and <code>ORDER_APPROVED</code>) into a local scope of the execution.</p>"}]}